/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CZ.IF.Datahouse
{
  public partial class Datahouse {
    public interface Iface {
      /// <summary>
      /// add attendance
      /// entityId,attendTime,staffId,type are required
      /// type: -1:off,1:on
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      void addAttendance(string accessKey, Dictionary<string, string> dataMap);
      #if SILVERLIGHT
      IAsyncResult Begin_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
      void End_addAttendance(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// add product inspect
      /// entityId,inspectTime,productNr,type are required
      /// type 0:fail,1:pass
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      void addProductInspect(string accessKey, Dictionary<string, string> dataMap);
      #if SILVERLIGHT
      IAsyncResult Begin_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
      void End_addProductInspect(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// add out put
      /// entityId,packTime,productNr,partId are required
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      void addProductPack(string accessKey, Dictionary<string, string> dataMap);
      #if SILVERLIGHT
      IAsyncResult Begin_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
      void End_addProductPack(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// set product inspect
      /// entityId,inspectTime,productNr,type are required
      /// type 0:fail,1:pass
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      void setProductInspectState(string accessKey, Dictionary<string, string> dataMap);
      #if SILVERLIGHT
      IAsyncResult Begin_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
      void End_setProductInspectState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// add entity operation record
      /// entityId,operateTime,state are required
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      void addOperatingState(string accessKey, Dictionary<string, string> dataMap);
      #if SILVERLIGHT
      IAsyncResult Begin_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap);
      void End_addOperatingState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get current on job workers number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      Dictionary<string, long> getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds);
      Dictionary<string, long> End_getCurrentOnJobWorkerNums(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get out put number
      /// date in format of 20130101
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      Dictionary<string, long> getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      Dictionary<string, long> End_getOriProductOutputNums(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get product inspect first time right number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      Dictionary<string, long> getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      Dictionary<string, long> End_getFTRProductNums(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get product inspect faild number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      Dictionary<string, long> getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      Dictionary<string, long> End_getFailProductInspectNums(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get product number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      Dictionary<string, long> getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      Dictionary<string, long> End_getProductOutputNums(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get entity workers on job time
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      Dictionary<string, long> getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime);
      Dictionary<string, long> End_getOnJobTotalTimes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get entity part num and produce-time
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityId"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      THashSet<Dictionary<string, string>> getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime);
      #if SILVERLIGHT
      IAsyncResult Begin_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime);
      THashSet<Dictionary<string, string>> End_getProductOutputNumAndTime(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      {
        return send_addAttendance(callback, state, accessKey, dataMap);
      }

      public void End_addAttendance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addAttendance();
      }

      #endif

      /// <summary>
      /// add attendance
      /// entityId,attendTime,staffId,type are required
      /// type: -1:off,1:on
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      public void addAttendance(string accessKey, Dictionary<string, string> dataMap)
      {
        #if !SILVERLIGHT
        send_addAttendance(accessKey, dataMap);
        recv_addAttendance();

        #else
        var asyncResult = Begin_addAttendance(null, null, accessKey, dataMap);
        End_addAttendance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addAttendance(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      #else
      public void send_addAttendance(string accessKey, Dictionary<string, string> dataMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addAttendance", TMessageType.Call, seqid_));
        addAttendance_args args = new addAttendance_args();
        args.AccessKey = accessKey;
        args.DataMap = dataMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addAttendance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addAttendance_result result = new addAttendance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      {
        return send_addProductInspect(callback, state, accessKey, dataMap);
      }

      public void End_addProductInspect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addProductInspect();
      }

      #endif

      /// <summary>
      /// add product inspect
      /// entityId,inspectTime,productNr,type are required
      /// type 0:fail,1:pass
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      public void addProductInspect(string accessKey, Dictionary<string, string> dataMap)
      {
        #if !SILVERLIGHT
        send_addProductInspect(accessKey, dataMap);
        recv_addProductInspect();

        #else
        var asyncResult = Begin_addProductInspect(null, null, accessKey, dataMap);
        End_addProductInspect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addProductInspect(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      #else
      public void send_addProductInspect(string accessKey, Dictionary<string, string> dataMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addProductInspect", TMessageType.Call, seqid_));
        addProductInspect_args args = new addProductInspect_args();
        args.AccessKey = accessKey;
        args.DataMap = dataMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addProductInspect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addProductInspect_result result = new addProductInspect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      {
        return send_addProductPack(callback, state, accessKey, dataMap);
      }

      public void End_addProductPack(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addProductPack();
      }

      #endif

      /// <summary>
      /// add out put
      /// entityId,packTime,productNr,partId are required
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      public void addProductPack(string accessKey, Dictionary<string, string> dataMap)
      {
        #if !SILVERLIGHT
        send_addProductPack(accessKey, dataMap);
        recv_addProductPack();

        #else
        var asyncResult = Begin_addProductPack(null, null, accessKey, dataMap);
        End_addProductPack(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addProductPack(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      #else
      public void send_addProductPack(string accessKey, Dictionary<string, string> dataMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addProductPack", TMessageType.Call, seqid_));
        addProductPack_args args = new addProductPack_args();
        args.AccessKey = accessKey;
        args.DataMap = dataMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addProductPack()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addProductPack_result result = new addProductPack_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      {
        return send_setProductInspectState(callback, state, accessKey, dataMap);
      }

      public void End_setProductInspectState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setProductInspectState();
      }

      #endif

      /// <summary>
      /// set product inspect
      /// entityId,inspectTime,productNr,type are required
      /// type 0:fail,1:pass
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      public void setProductInspectState(string accessKey, Dictionary<string, string> dataMap)
      {
        #if !SILVERLIGHT
        send_setProductInspectState(accessKey, dataMap);
        recv_setProductInspectState();

        #else
        var asyncResult = Begin_setProductInspectState(null, null, accessKey, dataMap);
        End_setProductInspectState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setProductInspectState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      #else
      public void send_setProductInspectState(string accessKey, Dictionary<string, string> dataMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setProductInspectState", TMessageType.Call, seqid_));
        setProductInspectState_args args = new setProductInspectState_args();
        args.AccessKey = accessKey;
        args.DataMap = dataMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setProductInspectState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setProductInspectState_result result = new setProductInspectState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      {
        return send_addOperatingState(callback, state, accessKey, dataMap);
      }

      public void End_addOperatingState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addOperatingState();
      }

      #endif

      /// <summary>
      /// add entity operation record
      /// entityId,operateTime,state are required
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="dataMap"></param>
      public void addOperatingState(string accessKey, Dictionary<string, string> dataMap)
      {
        #if !SILVERLIGHT
        send_addOperatingState(accessKey, dataMap);
        recv_addOperatingState();

        #else
        var asyncResult = Begin_addOperatingState(null, null, accessKey, dataMap);
        End_addOperatingState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addOperatingState(AsyncCallback callback, object state, string accessKey, Dictionary<string, string> dataMap)
      #else
      public void send_addOperatingState(string accessKey, Dictionary<string, string> dataMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addOperatingState", TMessageType.Call, seqid_));
        addOperatingState_args args = new addOperatingState_args();
        args.AccessKey = accessKey;
        args.DataMap = dataMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addOperatingState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addOperatingState_result result = new addOperatingState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds)
      {
        return send_getCurrentOnJobWorkerNums(callback, state, accessKey, entityIds);
      }

      public Dictionary<string, long> End_getCurrentOnJobWorkerNums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCurrentOnJobWorkerNums();
      }

      #endif

      /// <summary>
      /// get current on job workers number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      public Dictionary<string, long> getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds)
      {
        #if !SILVERLIGHT
        send_getCurrentOnJobWorkerNums(accessKey, entityIds);
        return recv_getCurrentOnJobWorkerNums();

        #else
        var asyncResult = Begin_getCurrentOnJobWorkerNums(null, null, accessKey, entityIds);
        return End_getCurrentOnJobWorkerNums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCurrentOnJobWorkerNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds)
      #else
      public void send_getCurrentOnJobWorkerNums(string accessKey, THashSet<string> entityIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCurrentOnJobWorkerNums", TMessageType.Call, seqid_));
        getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getCurrentOnJobWorkerNums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCurrentOnJobWorkerNums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        return send_getOriProductOutputNums(callback, state, accessKey, entityIds, startTime, endTime);
      }

      public Dictionary<string, long> End_getOriProductOutputNums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getOriProductOutputNums();
      }

      #endif

      /// <summary>
      /// get out put number
      /// date in format of 20130101
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public Dictionary<string, long> getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getOriProductOutputNums(accessKey, entityIds, startTime, endTime);
        return recv_getOriProductOutputNums();

        #else
        var asyncResult = Begin_getOriProductOutputNums(null, null, accessKey, entityIds, startTime, endTime);
        return End_getOriProductOutputNums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getOriProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #else
      public void send_getOriProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getOriProductOutputNums", TMessageType.Call, seqid_));
        getOriProductOutputNums_args args = new getOriProductOutputNums_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getOriProductOutputNums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getOriProductOutputNums_result result = new getOriProductOutputNums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOriProductOutputNums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        return send_getFTRProductNums(callback, state, accessKey, entityIds, startTime, endTime);
      }

      public Dictionary<string, long> End_getFTRProductNums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFTRProductNums();
      }

      #endif

      /// <summary>
      /// get product inspect first time right number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public Dictionary<string, long> getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getFTRProductNums(accessKey, entityIds, startTime, endTime);
        return recv_getFTRProductNums();

        #else
        var asyncResult = Begin_getFTRProductNums(null, null, accessKey, entityIds, startTime, endTime);
        return End_getFTRProductNums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFTRProductNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #else
      public void send_getFTRProductNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFTRProductNums", TMessageType.Call, seqid_));
        getFTRProductNums_args args = new getFTRProductNums_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getFTRProductNums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFTRProductNums_result result = new getFTRProductNums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFTRProductNums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        return send_getFailProductInspectNums(callback, state, accessKey, entityIds, startTime, endTime);
      }

      public Dictionary<string, long> End_getFailProductInspectNums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFailProductInspectNums();
      }

      #endif

      /// <summary>
      /// get product inspect faild number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public Dictionary<string, long> getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getFailProductInspectNums(accessKey, entityIds, startTime, endTime);
        return recv_getFailProductInspectNums();

        #else
        var asyncResult = Begin_getFailProductInspectNums(null, null, accessKey, entityIds, startTime, endTime);
        return End_getFailProductInspectNums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFailProductInspectNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #else
      public void send_getFailProductInspectNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFailProductInspectNums", TMessageType.Call, seqid_));
        getFailProductInspectNums_args args = new getFailProductInspectNums_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getFailProductInspectNums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFailProductInspectNums_result result = new getFailProductInspectNums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFailProductInspectNums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        return send_getProductOutputNums(callback, state, accessKey, entityIds, startTime, endTime);
      }

      public Dictionary<string, long> End_getProductOutputNums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProductOutputNums();
      }

      #endif

      /// <summary>
      /// get product number
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public Dictionary<string, long> getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getProductOutputNums(accessKey, entityIds, startTime, endTime);
        return recv_getProductOutputNums();

        #else
        var asyncResult = Begin_getProductOutputNums(null, null, accessKey, entityIds, startTime, endTime);
        return End_getProductOutputNums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProductOutputNums(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #else
      public void send_getProductOutputNums(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProductOutputNums", TMessageType.Call, seqid_));
        getProductOutputNums_args args = new getProductOutputNums_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getProductOutputNums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProductOutputNums_result result = new getProductOutputNums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductOutputNums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        return send_getOnJobTotalTimes(callback, state, accessKey, entityIds, startTime, endTime);
      }

      public Dictionary<string, long> End_getOnJobTotalTimes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getOnJobTotalTimes();
      }

      #endif

      /// <summary>
      /// get entity workers on job time
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityIds"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public Dictionary<string, long> getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getOnJobTotalTimes(accessKey, entityIds, startTime, endTime);
        return recv_getOnJobTotalTimes();

        #else
        var asyncResult = Begin_getOnJobTotalTimes(null, null, accessKey, entityIds, startTime, endTime);
        return End_getOnJobTotalTimes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getOnJobTotalTimes(AsyncCallback callback, object state, string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #else
      public void send_getOnJobTotalTimes(string accessKey, THashSet<string> entityIds, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getOnJobTotalTimes", TMessageType.Call, seqid_));
        getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
        args.AccessKey = accessKey;
        args.EntityIds = entityIds;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, long> recv_getOnJobTotalTimes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOnJobTotalTimes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime)
      {
        return send_getProductOutputNumAndTime(callback, state, accessKey, entityId, startTime, endTime);
      }

      public THashSet<Dictionary<string, string>> End_getProductOutputNumAndTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProductOutputNumAndTime();
      }

      #endif

      /// <summary>
      /// get entity part num and produce-time
      /// </summary>
      /// <param name="accessKey"></param>
      /// <param name="entityId"></param>
      /// <param name="startTime"></param>
      /// <param name="endTime"></param>
      public THashSet<Dictionary<string, string>> getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime)
      {
        #if !SILVERLIGHT
        send_getProductOutputNumAndTime(accessKey, entityId, startTime, endTime);
        return recv_getProductOutputNumAndTime();

        #else
        var asyncResult = Begin_getProductOutputNumAndTime(null, null, accessKey, entityId, startTime, endTime);
        return End_getProductOutputNumAndTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProductOutputNumAndTime(AsyncCallback callback, object state, string accessKey, string entityId, long startTime, long endTime)
      #else
      public void send_getProductOutputNumAndTime(string accessKey, string entityId, long startTime, long endTime)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProductOutputNumAndTime", TMessageType.Call, seqid_));
        getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
        args.AccessKey = accessKey;
        args.EntityId = entityId;
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<Dictionary<string, string>> recv_getProductOutputNumAndTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductOutputNumAndTime failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["addAttendance"] = addAttendance_Process;
        processMap_["addProductInspect"] = addProductInspect_Process;
        processMap_["addProductPack"] = addProductPack_Process;
        processMap_["setProductInspectState"] = setProductInspectState_Process;
        processMap_["addOperatingState"] = addOperatingState_Process;
        processMap_["getCurrentOnJobWorkerNums"] = getCurrentOnJobWorkerNums_Process;
        processMap_["getOriProductOutputNums"] = getOriProductOutputNums_Process;
        processMap_["getFTRProductNums"] = getFTRProductNums_Process;
        processMap_["getFailProductInspectNums"] = getFailProductInspectNums_Process;
        processMap_["getProductOutputNums"] = getProductOutputNums_Process;
        processMap_["getOnJobTotalTimes"] = getOnJobTotalTimes_Process;
        processMap_["getProductOutputNumAndTime"] = getProductOutputNumAndTime_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void addAttendance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addAttendance_args args = new addAttendance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addAttendance_result result = new addAttendance_result();
        iface_.addAttendance(args.AccessKey, args.DataMap);
        oprot.WriteMessageBegin(new TMessage("addAttendance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addProductInspect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addProductInspect_args args = new addProductInspect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addProductInspect_result result = new addProductInspect_result();
        iface_.addProductInspect(args.AccessKey, args.DataMap);
        oprot.WriteMessageBegin(new TMessage("addProductInspect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addProductPack_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addProductPack_args args = new addProductPack_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addProductPack_result result = new addProductPack_result();
        iface_.addProductPack(args.AccessKey, args.DataMap);
        oprot.WriteMessageBegin(new TMessage("addProductPack", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setProductInspectState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setProductInspectState_args args = new setProductInspectState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setProductInspectState_result result = new setProductInspectState_result();
        iface_.setProductInspectState(args.AccessKey, args.DataMap);
        oprot.WriteMessageBegin(new TMessage("setProductInspectState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addOperatingState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addOperatingState_args args = new addOperatingState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addOperatingState_result result = new addOperatingState_result();
        iface_.addOperatingState(args.AccessKey, args.DataMap);
        oprot.WriteMessageBegin(new TMessage("addOperatingState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCurrentOnJobWorkerNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCurrentOnJobWorkerNums_args args = new getCurrentOnJobWorkerNums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCurrentOnJobWorkerNums_result result = new getCurrentOnJobWorkerNums_result();
        result.Success = iface_.getCurrentOnJobWorkerNums(args.AccessKey, args.EntityIds);
        oprot.WriteMessageBegin(new TMessage("getCurrentOnJobWorkerNums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getOriProductOutputNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getOriProductOutputNums_args args = new getOriProductOutputNums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getOriProductOutputNums_result result = new getOriProductOutputNums_result();
        result.Success = iface_.getOriProductOutputNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getOriProductOutputNums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFTRProductNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFTRProductNums_args args = new getFTRProductNums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFTRProductNums_result result = new getFTRProductNums_result();
        result.Success = iface_.getFTRProductNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getFTRProductNums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFailProductInspectNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFailProductInspectNums_args args = new getFailProductInspectNums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFailProductInspectNums_result result = new getFailProductInspectNums_result();
        result.Success = iface_.getFailProductInspectNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getFailProductInspectNums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProductOutputNums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProductOutputNums_args args = new getProductOutputNums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProductOutputNums_result result = new getProductOutputNums_result();
        result.Success = iface_.getProductOutputNums(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getProductOutputNums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getOnJobTotalTimes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getOnJobTotalTimes_args args = new getOnJobTotalTimes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getOnJobTotalTimes_result result = new getOnJobTotalTimes_result();
        result.Success = iface_.getOnJobTotalTimes(args.AccessKey, args.EntityIds, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getOnJobTotalTimes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProductOutputNumAndTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProductOutputNumAndTime_args args = new getProductOutputNumAndTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProductOutputNumAndTime_result result = new getProductOutputNumAndTime_result();
        result.Success = iface_.getProductOutputNumAndTime(args.AccessKey, args.EntityId, args.StartTime, args.EndTime);
        oprot.WriteMessageBegin(new TMessage("getProductOutputNumAndTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAttendance_args : TBase
    {
      private string _accessKey;
      private Dictionary<string, string> _dataMap;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public Dictionary<string, string> DataMap
      {
        get
        {
          return _dataMap;
        }
        set
        {
          __isset.dataMap = true;
          this._dataMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool dataMap;
      }

      public addAttendance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  DataMap = new Dictionary<string, string>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    string _val3;
                    _key2 = iprot.ReadString();
                    _val3 = iprot.ReadString();
                    DataMap[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAttendance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (DataMap != null && __isset.dataMap) {
          field.Name = "dataMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
            foreach (string _iter4 in DataMap.Keys)
            {
              oprot.WriteString(_iter4);
              oprot.WriteString(DataMap[_iter4]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAttendance_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",DataMap: ");
        sb.Append(DataMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAttendance_result : TBase
    {

      public addAttendance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAttendance_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAttendance_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addProductInspect_args : TBase
    {
      private string _accessKey;
      private Dictionary<string, string> _dataMap;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public Dictionary<string, string> DataMap
      {
        get
        {
          return _dataMap;
        }
        set
        {
          __isset.dataMap = true;
          this._dataMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool dataMap;
      }

      public addProductInspect_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  DataMap = new Dictionary<string, string>();
                  TMap _map5 = iprot.ReadMapBegin();
                  for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                  {
                    string _key7;
                    string _val8;
                    _key7 = iprot.ReadString();
                    _val8 = iprot.ReadString();
                    DataMap[_key7] = _val8;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addProductInspect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (DataMap != null && __isset.dataMap) {
          field.Name = "dataMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
            foreach (string _iter9 in DataMap.Keys)
            {
              oprot.WriteString(_iter9);
              oprot.WriteString(DataMap[_iter9]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addProductInspect_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",DataMap: ");
        sb.Append(DataMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addProductInspect_result : TBase
    {

      public addProductInspect_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addProductInspect_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addProductInspect_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addProductPack_args : TBase
    {
      private string _accessKey;
      private Dictionary<string, string> _dataMap;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public Dictionary<string, string> DataMap
      {
        get
        {
          return _dataMap;
        }
        set
        {
          __isset.dataMap = true;
          this._dataMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool dataMap;
      }

      public addProductPack_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  DataMap = new Dictionary<string, string>();
                  TMap _map10 = iprot.ReadMapBegin();
                  for( int _i11 = 0; _i11 < _map10.Count; ++_i11)
                  {
                    string _key12;
                    string _val13;
                    _key12 = iprot.ReadString();
                    _val13 = iprot.ReadString();
                    DataMap[_key12] = _val13;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addProductPack_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (DataMap != null && __isset.dataMap) {
          field.Name = "dataMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
            foreach (string _iter14 in DataMap.Keys)
            {
              oprot.WriteString(_iter14);
              oprot.WriteString(DataMap[_iter14]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addProductPack_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",DataMap: ");
        sb.Append(DataMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addProductPack_result : TBase
    {

      public addProductPack_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addProductPack_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addProductPack_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setProductInspectState_args : TBase
    {
      private string _accessKey;
      private Dictionary<string, string> _dataMap;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public Dictionary<string, string> DataMap
      {
        get
        {
          return _dataMap;
        }
        set
        {
          __isset.dataMap = true;
          this._dataMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool dataMap;
      }

      public setProductInspectState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  DataMap = new Dictionary<string, string>();
                  TMap _map15 = iprot.ReadMapBegin();
                  for( int _i16 = 0; _i16 < _map15.Count; ++_i16)
                  {
                    string _key17;
                    string _val18;
                    _key17 = iprot.ReadString();
                    _val18 = iprot.ReadString();
                    DataMap[_key17] = _val18;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setProductInspectState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (DataMap != null && __isset.dataMap) {
          field.Name = "dataMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
            foreach (string _iter19 in DataMap.Keys)
            {
              oprot.WriteString(_iter19);
              oprot.WriteString(DataMap[_iter19]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setProductInspectState_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",DataMap: ");
        sb.Append(DataMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setProductInspectState_result : TBase
    {

      public setProductInspectState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setProductInspectState_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setProductInspectState_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addOperatingState_args : TBase
    {
      private string _accessKey;
      private Dictionary<string, string> _dataMap;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public Dictionary<string, string> DataMap
      {
        get
        {
          return _dataMap;
        }
        set
        {
          __isset.dataMap = true;
          this._dataMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool dataMap;
      }

      public addOperatingState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  DataMap = new Dictionary<string, string>();
                  TMap _map20 = iprot.ReadMapBegin();
                  for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                  {
                    string _key22;
                    string _val23;
                    _key22 = iprot.ReadString();
                    _val23 = iprot.ReadString();
                    DataMap[_key22] = _val23;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addOperatingState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (DataMap != null && __isset.dataMap) {
          field.Name = "dataMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DataMap.Count));
            foreach (string _iter24 in DataMap.Keys)
            {
              oprot.WriteString(_iter24);
              oprot.WriteString(DataMap[_iter24]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addOperatingState_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",DataMap: ");
        sb.Append(DataMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addOperatingState_result : TBase
    {

      public addOperatingState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addOperatingState_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addOperatingState_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCurrentOnJobWorkerNums_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
      }

      public getCurrentOnJobWorkerNums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set25 = iprot.ReadSetBegin();
                  for( int _i26 = 0; _i26 < _set25.Count; ++_i26)
                  {
                    string _elem27 = null;
                    _elem27 = iprot.ReadString();
                    EntityIds.Add(_elem27);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCurrentOnJobWorkerNums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter28 in EntityIds)
            {
              oprot.WriteString(_iter28);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCurrentOnJobWorkerNums_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getCurrentOnJobWorkerNums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map29 = iprot.ReadMapBegin();
                  for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                  {
                    string _key31;
                    long _val32;
                    _key31 = iprot.ReadString();
                    _val32 = iprot.ReadI64();
                    Success[_key31] = _val32;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCurrentOnJobWorkerNums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter33 in Success.Keys)
              {
                oprot.WriteString(_iter33);
                oprot.WriteI64(Success[_iter33]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCurrentOnJobWorkerNums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOriProductOutputNums_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
        public bool startTime;
        public bool endTime;
      }

      public getOriProductOutputNums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set34 = iprot.ReadSetBegin();
                  for( int _i35 = 0; _i35 < _set34.Count; ++_i35)
                  {
                    string _elem36 = null;
                    _elem36 = iprot.ReadString();
                    EntityIds.Add(_elem36);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOriProductOutputNums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter37 in EntityIds)
            {
              oprot.WriteString(_iter37);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOriProductOutputNums_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOriProductOutputNums_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getOriProductOutputNums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map38 = iprot.ReadMapBegin();
                  for( int _i39 = 0; _i39 < _map38.Count; ++_i39)
                  {
                    string _key40;
                    long _val41;
                    _key40 = iprot.ReadString();
                    _val41 = iprot.ReadI64();
                    Success[_key40] = _val41;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOriProductOutputNums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter42 in Success.Keys)
              {
                oprot.WriteString(_iter42);
                oprot.WriteI64(Success[_iter42]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOriProductOutputNums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFTRProductNums_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
        public bool startTime;
        public bool endTime;
      }

      public getFTRProductNums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set43 = iprot.ReadSetBegin();
                  for( int _i44 = 0; _i44 < _set43.Count; ++_i44)
                  {
                    string _elem45 = null;
                    _elem45 = iprot.ReadString();
                    EntityIds.Add(_elem45);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFTRProductNums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter46 in EntityIds)
            {
              oprot.WriteString(_iter46);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFTRProductNums_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFTRProductNums_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFTRProductNums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map47 = iprot.ReadMapBegin();
                  for( int _i48 = 0; _i48 < _map47.Count; ++_i48)
                  {
                    string _key49;
                    long _val50;
                    _key49 = iprot.ReadString();
                    _val50 = iprot.ReadI64();
                    Success[_key49] = _val50;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFTRProductNums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter51 in Success.Keys)
              {
                oprot.WriteString(_iter51);
                oprot.WriteI64(Success[_iter51]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFTRProductNums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFailProductInspectNums_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
        public bool startTime;
        public bool endTime;
      }

      public getFailProductInspectNums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set52 = iprot.ReadSetBegin();
                  for( int _i53 = 0; _i53 < _set52.Count; ++_i53)
                  {
                    string _elem54 = null;
                    _elem54 = iprot.ReadString();
                    EntityIds.Add(_elem54);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFailProductInspectNums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter55 in EntityIds)
            {
              oprot.WriteString(_iter55);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFailProductInspectNums_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFailProductInspectNums_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFailProductInspectNums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map56 = iprot.ReadMapBegin();
                  for( int _i57 = 0; _i57 < _map56.Count; ++_i57)
                  {
                    string _key58;
                    long _val59;
                    _key58 = iprot.ReadString();
                    _val59 = iprot.ReadI64();
                    Success[_key58] = _val59;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFailProductInspectNums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter60 in Success.Keys)
              {
                oprot.WriteString(_iter60);
                oprot.WriteI64(Success[_iter60]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFailProductInspectNums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductOutputNums_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
        public bool startTime;
        public bool endTime;
      }

      public getProductOutputNums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set61 = iprot.ReadSetBegin();
                  for( int _i62 = 0; _i62 < _set61.Count; ++_i62)
                  {
                    string _elem63 = null;
                    _elem63 = iprot.ReadString();
                    EntityIds.Add(_elem63);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductOutputNums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter64 in EntityIds)
            {
              oprot.WriteString(_iter64);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductOutputNums_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductOutputNums_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getProductOutputNums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map65 = iprot.ReadMapBegin();
                  for( int _i66 = 0; _i66 < _map65.Count; ++_i66)
                  {
                    string _key67;
                    long _val68;
                    _key67 = iprot.ReadString();
                    _val68 = iprot.ReadI64();
                    Success[_key67] = _val68;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductOutputNums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter69 in Success.Keys)
              {
                oprot.WriteString(_iter69);
                oprot.WriteI64(Success[_iter69]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductOutputNums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOnJobTotalTimes_args : TBase
    {
      private string _accessKey;
      private THashSet<string> _entityIds;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public THashSet<string> EntityIds
      {
        get
        {
          return _entityIds;
        }
        set
        {
          __isset.entityIds = true;
          this._entityIds = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityIds;
        public bool startTime;
        public bool endTime;
      }

      public getOnJobTotalTimes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  EntityIds = new THashSet<string>();
                  TSet _set70 = iprot.ReadSetBegin();
                  for( int _i71 = 0; _i71 < _set70.Count; ++_i71)
                  {
                    string _elem72 = null;
                    _elem72 = iprot.ReadString();
                    EntityIds.Add(_elem72);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOnJobTotalTimes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityIds != null && __isset.entityIds) {
          field.Name = "entityIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, EntityIds.Count));
            foreach (string _iter73 in EntityIds)
            {
              oprot.WriteString(_iter73);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOnJobTotalTimes_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityIds: ");
        sb.Append(EntityIds);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOnJobTotalTimes_result : TBase
    {
      private Dictionary<string, long> _success;

      public Dictionary<string, long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getOnJobTotalTimes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map74 = iprot.ReadMapBegin();
                  for( int _i75 = 0; _i75 < _map74.Count; ++_i75)
                  {
                    string _key76;
                    long _val77;
                    _key76 = iprot.ReadString();
                    _val77 = iprot.ReadI64();
                    Success[_key76] = _val77;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOnJobTotalTimes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter78 in Success.Keys)
              {
                oprot.WriteString(_iter78);
                oprot.WriteI64(Success[_iter78]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOnJobTotalTimes_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductOutputNumAndTime_args : TBase
    {
      private string _accessKey;
      private string _entityId;
      private long _startTime;
      private long _endTime;

      public string AccessKey
      {
        get
        {
          return _accessKey;
        }
        set
        {
          __isset.accessKey = true;
          this._accessKey = value;
        }
      }

      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public long StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public long EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool accessKey;
        public bool entityId;
        public bool startTime;
        public bool endTime;
      }

      public getProductOutputNumAndTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                EntityId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductOutputNumAndTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AccessKey != null && __isset.accessKey) {
          field.Name = "accessKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessKey);
          oprot.WriteFieldEnd();
        }
        if (EntityId != null && __isset.entityId) {
          field.Name = "entityId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EntityId);
          oprot.WriteFieldEnd();
        }
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTime) {
          field.Name = "endTime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_args(");
        sb.Append("AccessKey: ");
        sb.Append(AccessKey);
        sb.Append(",EntityId: ");
        sb.Append(EntityId);
        sb.Append(",StartTime: ");
        sb.Append(StartTime);
        sb.Append(",EndTime: ");
        sb.Append(EndTime);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductOutputNumAndTime_result : TBase
    {
      private THashSet<Dictionary<string, string>> _success;

      public THashSet<Dictionary<string, string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getProductOutputNumAndTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<Dictionary<string, string>>();
                  TSet _set79 = iprot.ReadSetBegin();
                  for( int _i80 = 0; _i80 < _set79.Count; ++_i80)
                  {
                    Dictionary<string, string> _elem81 = new Dictionary<string, string>();
                    {
                      _elem81 = new Dictionary<string, string>();
                      TMap _map82 = iprot.ReadMapBegin();
                      for( int _i83 = 0; _i83 < _map82.Count; ++_i83)
                      {
                        string _key84;
                        string _val85;
                        _key84 = iprot.ReadString();
                        _val85 = iprot.ReadString();
                        _elem81[_key84] = _val85;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success.Add(_elem81);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductOutputNumAndTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Map, Success.Count));
              foreach (Dictionary<string, string> _iter86 in Success)
              {
                {
                  oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter86.Count));
                  foreach (string _iter87 in _iter86.Keys)
                  {
                    oprot.WriteString(_iter87);
                    oprot.WriteString(_iter86[_iter87]);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductOutputNumAndTime_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
